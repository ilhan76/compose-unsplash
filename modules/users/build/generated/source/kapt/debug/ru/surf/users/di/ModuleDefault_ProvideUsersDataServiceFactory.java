// Generated by Dagger (https://dagger.dev).
package ru.surf.users.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.surf.users.base.UsersDatabase;
import ru.surf.users.services.dataService.UsersDataService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ModuleDefault_ProvideUsersDataServiceFactory implements Factory<UsersDataService> {
  private final Provider<UsersDatabase> dbProvider;

  public ModuleDefault_ProvideUsersDataServiceFactory(Provider<UsersDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public UsersDataService get() {
    return provideUsersDataService(dbProvider.get());
  }

  public static ModuleDefault_ProvideUsersDataServiceFactory create(
      Provider<UsersDatabase> dbProvider) {
    return new ModuleDefault_ProvideUsersDataServiceFactory(dbProvider);
  }

  public static UsersDataService provideUsersDataService(UsersDatabase db) {
    return Preconditions.checkNotNullFromProvides(ModuleDefault.INSTANCE.provideUsersDataService(db));
  }
}
