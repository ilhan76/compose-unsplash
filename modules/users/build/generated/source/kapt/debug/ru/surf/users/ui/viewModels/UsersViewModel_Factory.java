// Generated by Dagger (https://dagger.dev).
package ru.surf.users.ui.viewModels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.surf.users.data.preferences.UsersPreferences;
import ru.surf.users.services.apiService.UsersApiService;
import ru.surf.users.services.dataService.UsersDataService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UsersViewModel_Factory implements Factory<UsersViewModel> {
  private final Provider<UsersApiService> apiServiceProvider;

  private final Provider<UsersDataService> dataServiceProvider;

  private final Provider<UsersPreferences> preferencesProvider;

  public UsersViewModel_Factory(Provider<UsersApiService> apiServiceProvider,
      Provider<UsersDataService> dataServiceProvider,
      Provider<UsersPreferences> preferencesProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.dataServiceProvider = dataServiceProvider;
    this.preferencesProvider = preferencesProvider;
  }

  @Override
  public UsersViewModel get() {
    return newInstance(apiServiceProvider.get(), dataServiceProvider.get(), preferencesProvider.get());
  }

  public static UsersViewModel_Factory create(Provider<UsersApiService> apiServiceProvider,
      Provider<UsersDataService> dataServiceProvider,
      Provider<UsersPreferences> preferencesProvider) {
    return new UsersViewModel_Factory(apiServiceProvider, dataServiceProvider, preferencesProvider);
  }

  public static UsersViewModel newInstance(UsersApiService apiService, UsersDataService dataService,
      UsersPreferences preferences) {
    return new UsersViewModel(apiService, dataService, preferences);
  }
}
