// Generated by Dagger (https://dagger.dev).
package ru.surf.other.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;
import ru.surf.other.services.api.OtherApi;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ModuleNetwork_ProvideOtherApiFactory implements Factory<OtherApi> {
  private final Provider<Retrofit> retrofitProvider;

  public ModuleNetwork_ProvideOtherApiFactory(Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public OtherApi get() {
    return provideOtherApi(retrofitProvider.get());
  }

  public static ModuleNetwork_ProvideOtherApiFactory create(Provider<Retrofit> retrofitProvider) {
    return new ModuleNetwork_ProvideOtherApiFactory(retrofitProvider);
  }

  public static OtherApi provideOtherApi(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(ModuleNetwork.INSTANCE.provideOtherApi(retrofit));
  }
}
