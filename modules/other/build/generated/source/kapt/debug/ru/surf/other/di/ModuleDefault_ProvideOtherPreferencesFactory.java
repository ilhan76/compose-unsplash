// Generated by Dagger (https://dagger.dev).
package ru.surf.other.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.surf.core.data.preferences.CorePreferences;
import ru.surf.other.data.preferences.OtherPreferences;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ModuleDefault_ProvideOtherPreferencesFactory implements Factory<OtherPreferences> {
  private final Provider<CorePreferences> corePreferencesProvider;

  public ModuleDefault_ProvideOtherPreferencesFactory(
      Provider<CorePreferences> corePreferencesProvider) {
    this.corePreferencesProvider = corePreferencesProvider;
  }

  @Override
  public OtherPreferences get() {
    return provideOtherPreferences(corePreferencesProvider.get());
  }

  public static ModuleDefault_ProvideOtherPreferencesFactory create(
      Provider<CorePreferences> corePreferencesProvider) {
    return new ModuleDefault_ProvideOtherPreferencesFactory(corePreferencesProvider);
  }

  public static OtherPreferences provideOtherPreferences(CorePreferences corePreferences) {
    return Preconditions.checkNotNullFromProvides(ModuleDefault.INSTANCE.provideOtherPreferences(corePreferences));
  }
}
