// Generated by Dagger (https://dagger.dev).
package ru.surf.other.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.surf.other.services.api.OtherApi;
import ru.surf.other.services.apiService.OtherApiService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ModuleNetwork_ProvideOtherApiServiceFactory implements Factory<OtherApiService> {
  private final Provider<OtherApi> apiProvider;

  public ModuleNetwork_ProvideOtherApiServiceFactory(Provider<OtherApi> apiProvider) {
    this.apiProvider = apiProvider;
  }

  @Override
  public OtherApiService get() {
    return provideOtherApiService(apiProvider.get());
  }

  public static ModuleNetwork_ProvideOtherApiServiceFactory create(Provider<OtherApi> apiProvider) {
    return new ModuleNetwork_ProvideOtherApiServiceFactory(apiProvider);
  }

  public static OtherApiService provideOtherApiService(OtherApi api) {
    return Preconditions.checkNotNullFromProvides(ModuleNetwork.INSTANCE.provideOtherApiService(api));
  }
}
