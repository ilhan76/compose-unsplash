// Generated by Dagger (https://dagger.dev).
package ru.surf.core.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.surf.core.base.CoreDatabase;
import ru.surf.core.base.CoreSecurityDatabase;
import ru.surf.core.services.dataService.CoreDataService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ModuleDefault_ProvideUsersDataServiceFactory implements Factory<CoreDataService> {
  private final Provider<CoreDatabase> dbProvider;

  private final Provider<CoreSecurityDatabase> dbSecurityProvider;

  public ModuleDefault_ProvideUsersDataServiceFactory(Provider<CoreDatabase> dbProvider,
      Provider<CoreSecurityDatabase> dbSecurityProvider) {
    this.dbProvider = dbProvider;
    this.dbSecurityProvider = dbSecurityProvider;
  }

  @Override
  public CoreDataService get() {
    return provideUsersDataService(dbProvider.get(), dbSecurityProvider.get());
  }

  public static ModuleDefault_ProvideUsersDataServiceFactory create(
      Provider<CoreDatabase> dbProvider, Provider<CoreSecurityDatabase> dbSecurityProvider) {
    return new ModuleDefault_ProvideUsersDataServiceFactory(dbProvider, dbSecurityProvider);
  }

  public static CoreDataService provideUsersDataService(CoreDatabase db,
      CoreSecurityDatabase dbSecurity) {
    return Preconditions.checkNotNullFromProvides(ModuleDefault.INSTANCE.provideUsersDataService(db, dbSecurity));
  }
}
