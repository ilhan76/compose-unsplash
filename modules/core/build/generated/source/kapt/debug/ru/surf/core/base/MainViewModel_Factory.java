// Generated by Dagger (https://dagger.dev).
package ru.surf.core.base;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import java.util.Set;
import javax.inject.Provider;
import ru.surf.core.interfaces.IAppDatabase;
import ru.surf.core.interfaces.IAppPreferences;
import ru.surf.core.services.apiService.CoreApiService;
import ru.surf.core.services.dataService.CoreDataService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<CoreApiService> apiServiceProvider;

  private final Provider<CoreDataService> dataServiceProvider;

  private final Provider<Set<IAppDatabase>> dataServicesProvider;

  private final Provider<Set<IAppPreferences>> preferencesProvider;

  public MainViewModel_Factory(Provider<CoreApiService> apiServiceProvider,
      Provider<CoreDataService> dataServiceProvider,
      Provider<Set<IAppDatabase>> dataServicesProvider,
      Provider<Set<IAppPreferences>> preferencesProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.dataServiceProvider = dataServiceProvider;
    this.dataServicesProvider = dataServicesProvider;
    this.preferencesProvider = preferencesProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(apiServiceProvider.get(), dataServiceProvider.get(), dataServicesProvider.get(), preferencesProvider.get());
  }

  public static MainViewModel_Factory create(Provider<CoreApiService> apiServiceProvider,
      Provider<CoreDataService> dataServiceProvider,
      Provider<Set<IAppDatabase>> dataServicesProvider,
      Provider<Set<IAppPreferences>> preferencesProvider) {
    return new MainViewModel_Factory(apiServiceProvider, dataServiceProvider, dataServicesProvider, preferencesProvider);
  }

  public static MainViewModel newInstance(CoreApiService apiService, CoreDataService dataService,
      Set<IAppDatabase> dataServices, Set<IAppPreferences> preferences) {
    return new MainViewModel(apiService, dataService, dataServices, preferences);
  }
}
